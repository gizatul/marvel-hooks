{"version":3,"sources":["components/appHeader/AppHeader.js","resources/img/mjolnir.png","services/MarvelService.js","resources/img/spinner.gif","components/spinner/spinner.js","components/errorMessage/error.svg","components/errorMessage/errorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/errorBoundary/ErrorBoundary.js","components/app/App.js","index.js"],"names":["AppHeader","className","href","MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","name","description","length","slice","homepage","urls","wiki","thumbnail","path","extension","comics","items","Spinner","src","spinner","alt","ErrorMessage","error","RandomChar","state","loading","marvelService","onCharLoaded","setState","onCharLoading","onError","updateChar","Math","floor","random","then","catch","this","errorMessage","content","onClick","mjolnir","Component","View","objectFit","style","CharList","charList","newItemLoading","charEnded","onRequest","onCharListLoading","onCharListLoaded","newCharList","ended","itemRefs","setRef","ref","push","focusOnItem","forEach","item","classList","remove","add","focus","arr","i","tabIndex","props","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","CharInfo","charId","prevProps","skeleton","Info","ErrorBoundary","errorInfo","console","log","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c7771cd.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","class MarvelService {\n  _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  _apiKey = 'apikey=cb9119d84ffeb91c59dc6c6080764863';\n  _baseOffset = 1247;\n  \n  getResource = async (url) => { \n    let res = await fetch(url);\n  \n    if (!res.ok) { \n        throw new Error(`Could not fetch ${url}, status: ${res.status}`); \n    }   \n    return await res.json(); \n  }\n\n  getAllCharacters = async (offset = this._baseOffset) => { \n    const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\n    return res.data.results.map(this._transformCharacter);\n  }\n\n  getCharacter = async (id) => { \n    const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`); \n    return this._transformCharacter(res.data.results[0]); \n  }\n\n  _transformCharacter = ( char) => {  \n    return {\n        id: char.id,\n        name: char.name,\n        description: char.description.length > 180  ? `${char.description.slice(0, 180)}...` : char.description.length <= 0 ? 'There is not description' : char.description,\n        homepage: char.urls[0].url,\n        wiki: char.urls[1].url,\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n        comics: char.comics.items,\n    } \n  }\n}\n\nexport default MarvelService;","export default __webpack_public_path__ + \"static/media/spinner.cf2d997a.gif\";","import spinner from '../../resources/img/spinner.gif';\nimport './spinner.scss';\n\nconst Spinner = () => {\n  return (\n    <div className='spinner'>\n      <img  src={spinner} alt=\"loading\" />\n    </div>\n  )\n}\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.be36707d.svg\";","import error from './error.svg';\nimport './errorMessage.scss';\n\nconst ErrorMessage = () => {\n  return (\n    <div className='error'>\n      <img  src={error} alt=\"error\" />\n      <div className='error__text'>Something  went wrong</div>\n    </div>\n  )\n}\nexport default ErrorMessage;","import { Component } from 'react';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\n\nclass RandomChar extends Component {\n\n    state = { \n        char: {}, \n        loading: true,\n        error: false,\n    }\n\n    marvelService = new MarvelService(); \n\n    componentDidMount() {\n        this.updateChar(); \n    }\n\n    onCharLoaded = (char) => { \n        this.setState({\n            char: char, \n            loading: false, \n        }) \n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true,\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true,\n        })\n\n    }\n\n    updateChar = () => {\n        let id = Math.floor((Math.random() * (1011400 - 1011000 + 1)) + 1011000);\n        this.onCharLoading(); \n        this.marvelService\n            .getCharacter(id) \n            .then(this.onCharLoaded) \n            .catch(this.onError) \n    }\n\n    render() {\n        const {char, loading, error} = this.state; \n        \n        const errorMessage = error ? <ErrorMessage/> : null; \n        const spinner = loading ? <Spinner/> : null; \n        const content = !(loading || error) ? <View char={char}/> : null; \n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={this.updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nconst View = ({char}) => { \n    const {thumbnail, description, name, homepage, wiki} = char;\n    let objectFit;\n    thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? objectFit = 'contain' : objectFit = 'unset';\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={{objectFit: objectFit}}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    ) \n}\n\nexport default RandomChar;","import React, {Component} from 'react';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types';\nimport './charList.scss';\n\nclass CharList extends Component {\n\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false, \n        offset: 1247, \n        charEnded: false,\n    }\n    \n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest(); \n    }\n\n    onRequest = (offset) => { \n        this.onCharListLoading(); \n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded) \n            .catch(this.onError)\n    }\n\n    onCharListLoaded = (newCharList) => { \n        let ended = false; \n        if (newCharList.length < 9) { \n            ended = true;\n        }\n\n        this.setState(({offset, charList}) => ({ \n                charList: [...charList, ...newCharList], \n                loading: false,\n                newItemLoading: false,\n                offset: offset + 9, \n                charEnded: ended, \n        }))\n    }\n\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true,\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error:true,\n        })\n    }\n\n    \n    itemRefs = []; \n\n    setRef = (ref) => { \n        this.itemRefs.push(ref); \n    }\n\n    focusOnItem = (id) => { \n        this.itemRefs.forEach(item => {\n            item.classList.remove('char__item_selected')\n        });\n        this.itemRefs[id].classList.add('char__item_selected');\n        this.itemRefs[id].focus(); \n    }\n\n    renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let objectFit;\n            item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? objectFit = 'unset' : objectFit = 'cover';\n\n            return (\n                <li \n                    tabIndex='0'\n                    className=\"char__item\"\n                    key={item.id}\n                    ref={this.setRef} \n                    onClick={() => {\n                        this.props.onCharSelected(item.id); \n                        this.focusOnItem(i); \n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.id);\n                            this.focusOnItem(i); \n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={{objectFit: objectFit}}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        \n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    render() {\n\n        const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n        \n        const items = this.renderItems(charList);\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button className=\"button button__main button__long\"\n                        disabled={newItemLoading}\n                        onClick={() => this.onRequest(offset)}\n                        style={{'display': charEnded ? 'none' : 'block'}}>\n                    <div className=\"inner\">\n                        load more\n                    </div>\n                </button>\n            </div>\n        )\n    }\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\nimport './charInfo.scss';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport PropTypes from 'prop-types';\n\nclass CharInfo extends Component {\n    state = {\n        char: null,\n        loading: false,\n        error: false,\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    componentDidUpdate(prevProps) { \n        if (this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true,\n        })\n    }\n\n    onCharLoaded = (char) => {\n        this.setState({\n            char: char,\n            loading: false,\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true,\n        })\n    }\n\n    updateChar = () => {\n        const {charId} = this.props;\n\n        if(!charId){\n            return;\n        }\n\n        this.onCharLoading();\n\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n    }\n\n    render() {\n        const {char, loading, error} = this.state; \n        \n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null; \n        const spinner = loading ? <Spinner/> : null; \n        const content = !(loading || error || !char) ? <Info char={char}/> : null;\n        \n        return (\n            <div className=\"char__info\">\n                {errorMessage}\n                {spinner}\n                {skeleton}\n                {content}\n            </div>\n        )\n    }\n}\n\nconst Info = ({char}) => {\n    const {thumbnail, name, description, wiki, homepage, comics} = char;\n    let objectFit;\n    thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? objectFit = 'contain' : objectFit = 'unset';\n    \n    return(\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={{objectFit: objectFit}}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'Not found'}\n                {comics.slice(0, 10).map((item, i) => {\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            {item.name} \n                        </li>\n                    )                   \n                })}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number, \n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = { \n    error: false,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    })\n  }\n  \n  render() {\n    if (this.state.error === true) {\n      return (\n        <ErrorMessage/>\n      )\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import { Component } from \"react\";\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport decoration from '../../resources/img/vision.png';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nclass App extends Component {\n    state = {\n        selectedChar: null,\n    }\n\n    onCharSelected = (id) => {\n        this.setState({\n            selectedChar: id,\n        })\n    }\n\n    render () {\n        return (\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar/>\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected}/> {/*передача метода в CharList */}\n                        </ErrorBoundary>\n                        <ErrorBoundary> {/*Оборачиваем компонент с ошибкой CharInfo в предохранитель ErrorBoundary */}\n                            <CharInfo charId={this.state.selectedChar}/> {/*передача id в CharInfo*/}\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport './style/style.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}