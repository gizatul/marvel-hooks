{"version":3,"sources":["components/errorMessage/error.svg","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","className","src","error","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllComics","offset","res","results","map","_transformComic","getComic","id","comic","title","thumbnail","path","extension","price","prices","description","lang","textObjects","language","pages","pageCount","resourceURI","getAllCharacters","_transformCharacter","getCharacterByName","name","getCharacter","char","length","slice","fullDescription","homepage","urls","wiki","comics","items","Skeleton","setContent","Component","AppBanner","avengers","avengersLogo","SinglePage","dataType","useParams","setData","useEffect","updateData","then","onDataLoaded"],"mappings":"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","file":"static/js/6.85595605.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.be36707d.svg\";","import error from './error.svg';\nimport './errorMessage.scss';\n\nconst ErrorMessage = () => {\n  return (\n    <div className='error'>\n      <img  src={error} alt=\"error\" />\n      <div className='error__text'>Something  went wrong</div>\n    </div>\n  )\n}\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=cb9119d84ffeb91c59dc6c6080764863';\n    const _baseOffset = 1247;\n\n    const getAllComics = async (offset = '0') => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComic);\n    }\n    \n    const getComic = async (id = 32) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComic(res.data.results[0]);\n    }\n\n    const _transformComic = (comic) => {\n        return {\n            id: comic.id,\n            title: comic.title,\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\n            price: comic.prices[0].price ? comic.prices[0].price + '$' : 'Not available',\n            description: comic.description || 'There is no description',\n            lang: comic.textObjects[0]?.language || 'en-us',\n            pages: comic.pageCount ? comic.pageCount + 'p.' : 'No information about the number of pages',\n            resourceURI: comic.resourceURI,\n        }\n    }\n  \n    const getAllCharacters = async (offset = _baseOffset) => { \n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter); \n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n\n    const getCharacter = async (id) => { \n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`); \n        return _transformCharacter(res.data.results[0]); \n    }\n\n    const _transformCharacter = (char) => {  \n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description.length > 180  ? `${char.description.slice(0, 180)}...` : char.description.length <= 0 ? 'There is not description' : char.description,\n            fullDescription: char.description ? char.description : 'There is not description' ,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            comics: char.comics.items,\n        } \n    }\n    return {getAllCharacters, \n            getCharacter, \n            clearError, \n            process,\n            setProcess, \n            getAllComics, \n            getComic, \n            getCharacterByName}\n}\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type' : 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            let response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) { \n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); \n            }\n            const data = await response.json();\n            return data;\n        }   catch(error) {\n            setProcess('error');\n            throw error; \n        }\n    }, []) \n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []); \n    return { request,  clearError, process, setProcess};\n}\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/spinner';\nimport ErrorMessage from '../components/errorMessage/errorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            return new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;  ","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import './singleComicPage.scss';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport { useParams } from 'react-router-dom';\nimport AppBanner from '../appBanner/AppBanner';\nimport setContent from '../../utils/setContent';\n\nconst SinglePage = ({Component, dataType}) => {\n    const {id} = useParams(); \n    const [data, setData] = useState(null);\n    const {getComic, clearError, getCharacter, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateData() // eslint-disable-next-line\n    }, [id]);\n\n    const updateData = () => {\n\n        clearError();\n        switch (dataType) {\n            case 'comic':\n                getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));\n                break;\n            case 'character':\n                getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));\n        }\n    }\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    }\n\n    return (\n        <>\n            <AppBanner/>\n            {setContent(process, Component, data)}\n        </>\n    )\n}\n\nexport default SinglePage;"],"sourceRoot":""}