{"version":3,"sources":["components/errorMessage/error.svg","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearch/CharSearch.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","className","src","error","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllComics","offset","res","results","map","_transformComic","getComic","id","comic","title","thumbnail","path","extension","price","prices","description","lang","textObjects","language","pages","pageCount","resourceURI","getAllCharacters","_transformCharacter","getCharacterByName","name","getCharacter","char","length","slice","fullDescription","homepage","urls","wiki","comics","items","Skeleton","setContent","Component","ErrorBoundary","state","errorInfo","console","log","this","setState","props","children","View","objectFit","style","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Info","to","substring","CharInfo","charId","CharSearch","errorMessage","loading","initialValues","search","validationSchema","Yup","required","onSubmit","onChange","target","value","type","placeholder","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.d27855a0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.be36707d.svg\";","import error from './error.svg';\nimport './errorMessage.scss';\n\nconst ErrorMessage = () => {\n  return (\n    <div className='error'>\n      <img  src={error} alt=\"error\" />\n      <div className='error__text'>Something  went wrong</div>\n    </div>\n  )\n}\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=cb9119d84ffeb91c59dc6c6080764863';\n    const _baseOffset = 1247;\n\n    const getAllComics = async (offset = '0') => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComic);\n    }\n    \n    const getComic = async (id = 32) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComic(res.data.results[0]);\n    }\n\n    const _transformComic = (comic) => {\n        return {\n            id: comic.id,\n            title: comic.title,\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\n            price: comic.prices[0].price ? comic.prices[0].price + '$' : 'Not available',\n            description: comic.description || 'There is no description',\n            lang: comic.textObjects[0]?.language || 'en-us',\n            pages: comic.pageCount ? comic.pageCount + 'p.' : 'No information about the number of pages',\n            resourceURI: comic.resourceURI,\n        }\n    }\n  \n    const getAllCharacters = async (offset = _baseOffset) => { \n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter); \n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n\n    const getCharacter = async (id) => { \n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`); \n        return _transformCharacter(res.data.results[0]); \n    }\n\n    const _transformCharacter = (char) => {  \n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description.length > 180  ? `${char.description.slice(0, 180)}...` : char.description.length <= 0 ? 'There is not description' : char.description,\n            fullDescription: char.description ? char.description : 'There is not description' ,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            comics: char.comics.items,\n        } \n    }\n    return {getAllCharacters, \n            getCharacter, \n            clearError, \n            process,\n            setProcess, \n            getAllComics, \n            getComic, \n            getCharacterByName}\n}\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport const useHttp = () => {\n\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type' : 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            let response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) { \n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); \n            }\n            const data = await response.json();\n            return data;\n        }   catch(error) {\n            setProcess('error');\n            throw error; \n        }\n    }, []) \n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []); \n    return { request,  clearError, process, setProcess};\n}\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/spinner';\nimport ErrorMessage from '../components/errorMessage/errorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            return new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;  ","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = { \n    error: false,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    })\n  }\n  \n  render() {\n    if (this.state.error === true) {\n      return (\n        <ErrorMessage/>\n      )\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useEffect, useState } from 'react';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService(); \n\n    useEffect(() => {\n        updateChar() // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        let id = Math.floor((Math.random() * (1011400 - 1011000 + 1)) + 1011000);\n        getCharacter(id) \n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\n\n\nconst View = ({data}) => { \n    const {thumbnail, description, name, homepage, wiki} = data;\n    let objectFit;\n    thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? objectFit = 'contain' : objectFit = 'unset';\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={{objectFit: objectFit}}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    ) \n}\n\nexport default RandomChar;","import React, {useState, useEffect, useRef, useMemo} from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            return new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(1247);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true); // eslint-disable-next-line\n    }, []) \n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const  onCharListLoaded = (newCharList) => { \n\n        let ended = false; \n        if (newCharList.length < 9) { \n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]); \n\n    const focusOnItem = (id) => { \n        itemRefs.current.forEach(item => { \n            item.classList.remove('char__item_selected')\n        });\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus(); \n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let objectFit;\n            item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? objectFit = 'unset' : objectFit = 'cover';\n\n            return (\n                    <CSSTransition key={item.id} timeout={500} classNames='char__item' >\n                        <li \n                            tabIndex='0'\n                            className=\"char__item\"\n                            ref={el => itemRefs.current[i] = el} \n                            onClick={() => {\n                                props.onCharSelected(item.id); \n                                focusOnItem(i); \n                            }}\n                            onKeyPress={(e) => {\n                                if (e.key === ' ' || e.key === \"Enter\") {\n                                    props.onCharSelected(item.id);\n                                    focusOnItem(i); \n                                }\n                            }}>\n                                <img src={item.thumbnail} alt={item.name} style={{objectFit: objectFit}}/>\n                                <div className=\"char__name\">{item.name}</div>\n                        </li>\n                    </CSSTransition>\n            )\n        });\n        \n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading) // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    onClick={() => onRequest(offset)}\n                    style={{'display': charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\">\n                    load more\n                </div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport './charInfo.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar() // eslint-disable-next-line\n    }, [props.charId]);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n\n        if(!charId){\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n        \n        return (\n            <div className=\"char__info\">\n                {setContent(process, Info, char)}\n            </div>\n        )\n}\n\nconst Info = ({data}) => {\n    const {thumbnail, name, description, wiki, homepage, comics} = data;\n    let objectFit;\n    thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? objectFit = 'contain' : objectFit = 'unset';\n    \n    return(\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={{objectFit: objectFit}}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'Not found'}\n                {comics.slice(0, 10).map((item, i) => {\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            <Link to={`/comics/${item.resourceURI.substring(43)}`}>\n                                {item.name} \n                            </Link>\n                        </li>\n                    )                   \n                })}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number, \n}\n\nexport default CharInfo;","import './charSearch.scss';\nimport '../../style/button.scss';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport * as Yup from 'yup';\n\nconst CharSearch = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = (name) => {\n        clearError();\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n    \n    const errorMessage = process === 'error' ? <ErrorMessage/> : null;\n    const loading = process === 'loading';\n\n    const results = !char ? null : char.length > 0 ?\n        <div className='char__search-panel'>\n            <div className='char__search-success'>There is! Visit {char[0].name} page?</div>\n            <Link to={`/characters/${char[0].id}`} className='button button__secondary'>\n                <div className='inner'>TO PAGE</div>\n            </Link>\n        </div> : \n        <div className='char__search-error'>The character was not found. Check the name and try again</div>;\n\n    return (\n        <div className='char__search'>\n            <Formik\n                initialValues={{\n                    search: '',\n                }} \n                validationSchema = {Yup.object({\n                    search: Yup.string().required('This field is required'),\n                })}\n                onSubmit = {({search}) => {\n                    updateChar(search);\n                }}\n            >\n                <Form onChange={e => !e.target.value ? setChar(null) : null}>\n                    <label className='char__search-title'>Or find a character by name:</label>\n                    <div className='char__search-panel'>\n                        <Field \n                            id=\"search\" \n                            name=\"search\" \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button className='button button__main'>\n                            <div className=\"inner\" disabled={loading}>FIND</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component='div' name='search' className='char__search-error'/> \n                </Form>\n            </Formik>\n            {errorMessage}\n            {results}\n        </div>\n    )\n}\n\nexport default CharSearch;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport CharSearch from \"../charSearch/CharSearch\";\nimport { Helmet } from \"react-helmet\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                    />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div className=\"char__panel\">\n                    <ErrorBoundary> \n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearch/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"sourceRoot":""}